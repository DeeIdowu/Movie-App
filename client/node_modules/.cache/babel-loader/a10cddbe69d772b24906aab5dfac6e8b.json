{"ast":null,"code":"var _jsxFileName = \"/Users/deeidowu/Desktop/2020-Coding-Content/Movie-App-Clone/movie-app/client/src/components/views/MovieDetail/MovieDetail.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { List, Avatar, Row, Col, Button } from \"antd\";\nimport axios from \"axios\";\nimport Comments from \"./Sections/Comments\";\nimport LikeDislikes from \"./Sections/LikeDislikes\";\nimport { API_URL, API_KEY, IMAGE_BASE_URL, IMAGE_SIZE } from \"../../Config\";\nimport GridCards from \"../../commons/GridCards\";\nimport MainImage from \"../../views/LandingPage/Sections/MainImage\";\nimport MovieInfo from \"./Sections/MovieInfo\";\nimport Favorite from \"./Sections/Favorite\";\n\nfunction MovieDetailPage(props) {\n  const movieId = props.match.params.movieId;\n  const [Movie, setMovie] = useState([]);\n  const [Casts, setCasts] = useState([]);\n  const [CommentLists, setCommentLists] = useState([]);\n  const [LoadingForMovie, setLoadingForMovie] = useState(true);\n  const [LoadingForCasts, setLoadingForCasts] = useState(true);\n  const [ActorToggle, setActorToggle] = useState(false);\n  const movieVariable = {\n    movieId: movieId\n  };\n  useEffect(() => {\n    let endpointForMovieInfo = `${API_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n    fetchDetailInfo(endpointForMovieInfo);\n    axios.post(\"/api/comment/getComments\", movieVariable).then(response => {\n      console.log(response);\n\n      if (response.data.success) {\n        console.log(\"response.data.comments\", response.data.comments);\n        setCommentLists(response.data.comments);\n      } else {\n        alert(\"Failed to get comments Info\");\n      }\n    });\n  }, []);\n\n  const toggleActorView = () => {\n    setActorToggle(!ActorToggle);\n  };\n\n  const fetchDetailInfo = endpoint => {\n    fetch(endpoint).then(result => result.json()).then(result => {\n      console.log(result);\n      setMovie(result);\n      setLoadingForMovie(false);\n      let endpointForCasts = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n      fetch(endpointForCasts).then(result => result.json()).then(result => {\n        console.log(result);\n        setCasts(result.cast);\n      });\n      setLoadingForCasts(false);\n    }).catch(error => console.error(\"Error:\", error));\n  };\n\n  const updateComment = newComment => {\n    setCommentLists(CommentLists.concat(newComment));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, !LoadingForMovie ? React.createElement(MainImage, {\n    image: `${IMAGE_BASE_URL}${IMAGE_SIZE}${Movie.backdrop_path}`,\n    title: Movie.original_title,\n    text: Movie.overview,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"loading...\"), React.createElement(\"div\", {\n    style: {\n      width: \"85%\",\n      margin: \"1rem auto\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"flex-end\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Favorite, {\n    movieInfo: Movie,\n    movieId: movieId,\n    userFrom: localStorage.getItem(\"userId\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  })), !LoadingForMovie ? React.createElement(MovieInfo, {\n    movie: Movie,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"loading...\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      margin: \"2rem\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: toggleActorView,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Toggle Actor View \")), ActorToggle && React.createElement(Row, {\n    gutter: [16, 16],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, !LoadingForCasts ? Casts.map((cast, index) => cast.profile_path && React.createElement(GridCards, {\n    actor: true,\n    image: cast.profile_path,\n    characterName: cast.characterName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  })) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"loading...\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(LikeDislikes, {\n    video: true,\n    videoId: movieId,\n    userId: localStorage.getItem(\"userId\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  })), React.createElement(Comments, {\n    movieTitle: Movie.original_title,\n    CommentLists: CommentLists,\n    postId: movieId,\n    refreshFunction: updateComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })));\n}\n\nexport default MovieDetailPage;","map":{"version":3,"sources":["/Users/deeidowu/Desktop/2020-Coding-Content/Movie-App-Clone/movie-app/client/src/components/views/MovieDetail/MovieDetail.js"],"names":["React","useEffect","useState","List","Avatar","Row","Col","Button","axios","Comments","LikeDislikes","API_URL","API_KEY","IMAGE_BASE_URL","IMAGE_SIZE","GridCards","MainImage","MovieInfo","Favorite","MovieDetailPage","props","movieId","match","params","Movie","setMovie","Casts","setCasts","CommentLists","setCommentLists","LoadingForMovie","setLoadingForMovie","LoadingForCasts","setLoadingForCasts","ActorToggle","setActorToggle","movieVariable","endpointForMovieInfo","fetchDetailInfo","post","then","response","console","log","data","success","comments","alert","toggleActorView","endpoint","fetch","result","json","endpointForCasts","cast","catch","error","updateComment","newComment","concat","backdrop_path","original_title","overview","width","margin","display","justifyContent","localStorage","getItem","map","index","profile_path","characterName"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { List, Avatar, Row, Col, Button } from \"antd\";\nimport axios from \"axios\";\n\nimport Comments from \"./Sections/Comments\";\nimport LikeDislikes from \"./Sections/LikeDislikes\";\nimport { API_URL, API_KEY, IMAGE_BASE_URL, IMAGE_SIZE } from \"../../Config\";\nimport GridCards from \"../../commons/GridCards\";\nimport MainImage from \"../../views/LandingPage/Sections/MainImage\";\nimport MovieInfo from \"./Sections/MovieInfo\";\nimport Favorite from \"./Sections/Favorite\";\nfunction MovieDetailPage(props) {\n  const movieId = props.match.params.movieId;\n  const [Movie, setMovie] = useState([]);\n  const [Casts, setCasts] = useState([]);\n  const [CommentLists, setCommentLists] = useState([]);\n  const [LoadingForMovie, setLoadingForMovie] = useState(true);\n  const [LoadingForCasts, setLoadingForCasts] = useState(true);\n  const [ActorToggle, setActorToggle] = useState(false);\n  const movieVariable = {\n    movieId: movieId\n  };\n\n  useEffect(() => {\n    let endpointForMovieInfo = `${API_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n    fetchDetailInfo(endpointForMovieInfo);\n\n    axios.post(\"/api/comment/getComments\", movieVariable).then(response => {\n      console.log(response);\n      if (response.data.success) {\n        console.log(\"response.data.comments\", response.data.comments);\n        setCommentLists(response.data.comments);\n      } else {\n        alert(\"Failed to get comments Info\");\n      }\n    });\n  }, []);\n\n  const toggleActorView = () => {\n    setActorToggle(!ActorToggle);\n  };\n\n  const fetchDetailInfo = endpoint => {\n    fetch(endpoint)\n      .then(result => result.json())\n      .then(result => {\n        console.log(result);\n        setMovie(result);\n        setLoadingForMovie(false);\n\n        let endpointForCasts = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n        fetch(endpointForCasts)\n          .then(result => result.json())\n          .then(result => {\n            console.log(result);\n            setCasts(result.cast);\n          });\n\n        setLoadingForCasts(false);\n      })\n      .catch(error => console.error(\"Error:\", error));\n  };\n\n  const updateComment = newComment => {\n    setCommentLists(CommentLists.concat(newComment));\n  };\n\n  return (\n    <div>\n      {/* Header */}\n      {!LoadingForMovie ? (\n        <MainImage\n          image={`${IMAGE_BASE_URL}${IMAGE_SIZE}${Movie.backdrop_path}`}\n          title={Movie.original_title}\n          text={Movie.overview}\n        />\n      ) : (\n        <div>loading...</div>\n      )}\n\n      {/* Body */}\n      <div style={{ width: \"85%\", margin: \"1rem auto\" }}>\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <Favorite\n            movieInfo={Movie}\n            movieId={movieId}\n            userFrom={localStorage.getItem(\"userId\")}\n          />\n        </div>\n\n        {/* Movie Info */}\n        {!LoadingForMovie ? <MovieInfo movie={Movie} /> : <div>loading...</div>}\n\n        <br />\n        {/* Actors Grid*/}\n\n        <div\n          style={{ display: \"flex\", justifyContent: \"center\", margin: \"2rem\" }}\n        >\n          <Button onClick={toggleActorView}>Toggle Actor View </Button>\n        </div>\n\n        {ActorToggle && (\n          <Row gutter={[16, 16]}>\n            {!LoadingForCasts ? (\n              Casts.map(\n                (cast, index) =>\n                  cast.profile_path && (\n                    <GridCards\n                      actor\n                      image={cast.profile_path}\n                      characterName={cast.characterName}\n                    />\n                  )\n              )\n            ) : (\n              <div>loading...</div>\n            )}\n          </Row>\n        )}\n        <br />\n\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <LikeDislikes\n            video\n            videoId={movieId}\n            userId={localStorage.getItem(\"userId\")}\n          />\n        </div>\n\n        {/* Comments */}\n        <Comments\n          movieTitle={Movie.original_title}\n          CommentLists={CommentLists}\n          postId={movieId}\n          refreshFunction={updateComment}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default MovieDetailPage;\n"]},"metadata":{},"sourceType":"module"}